1- Setup the backend environment
    - Initialize npm : npm init -y
    - Install backend dependencies :
        npm install bcrypt@^5.1.1 \
        cookie-parser@^1.4.7 \
        cors@^2.8.5 \
        date-fns-tz@^3.2.0 \
        dotenv@^16.4.5 \
        express@^4.21.1 \
        jsonwebtoken@^9.0.2 \
        mongoose@^8.8.0 \
        passport@^0.7.0 \
        passport-jwt@^4.0.1 \
        qrcode@^1.5.4 \
        resend@^4.0.1-alpha.0 \
        speakeasy@^2.0.0 \
        zod@^3.23.8
    -  install typescript and all the required development dependencies :
        npm install -D @types/bcrypt@^5.0.2 \
        @types/cookie-parser@^1.4.7 \
        @types/cors@^2.8.17 \
        @types/dotenv@^8.2.3 \
        @types/express@^5.0.0 \
        @types/jsonwebtoken@^9.0.7 \
        @types/mongoose@^5.11.97 \
        @types/passport@^1.0.17 \
        @types/passport-jwt@^4.0.1 \
        @types/qrcode@^1.5.5 \
        @types/speakeasy@^2.0.10 \
        ts-node-dev@^2.0.0 \
        typescript@^5.6.3
    - Create a TypeScript configuration file to initialize TypeScript in the project : 
        npx tsc --init
        - Create src folder
        - Edit tsconfig.json
    - Edit the package.json file for deployment :
        - dev
        - build
        - start
    - Create backend project folser structure:
        backend/
            - node_modules/
            - src/
                - common/
                    - enums/
                    - interface/
                    - strategies/
                    - utils/
                    - validators/
                - config/
                - database/
                    - models/
                        database.ts
                - mailers/
                    - templates/
                - middleware/
                - modules/
                    - auth
                    - mfa
            index.ts
            package-lock.json
            package.json
            tsconfig.json
    - Create .env & gitignore files :
    - Setup the src/index.ts file :
        - Create the getEnv function
        - Create the app.config.ts 


Explanation of the Schema:
    U.S. SSN (XXX-XX-XXXX):

    Regex: ^(?!000|666|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$

    Validates the U.S. SSN format with dashes. It checks for 9 digits and ensures that invalid numbers like 000, 666, or starting with 9 are excluded.

    European SSN (National ID formats):

    Regex for European formats:

    \d{9}: 9 digits for some countries (e.g., Belgium, Netherlands).

    \d{13}: 13 digits for some countries (e.g., France, Germany).

    \d{15}: 15 digits (some national ID formats).

    [A-Z0-9]{16}: 16 alphanumeric characters for Italy's Codice Fiscale.

    [A-Z]{2}\d{2} \d{2} \d{2} \d{2}: 10-character format for UK National Insurance Number (QQ 12 34 56 C).

    \d{2}\/\d{10}: 12-character format for Spain's SSN with a slash (12/1234567890).

    Transforming Input:

    The transform method is used to strip out any non-numeric or non-alphabetic characters for comparison, ensuring that we only deal with digits or alphanumeric characters.

    Length Check:

    The second refine checks the length of the cleaned SSN, ensuring it matches the expected length of 9, 13, 15, or 16 characters for the given formats.